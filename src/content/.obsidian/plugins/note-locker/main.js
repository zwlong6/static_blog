/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var m=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var w=Object.getOwnPropertyNames;var x=Object.prototype.hasOwnProperty;var N=(a,i)=>{for(var t in i)m(a,t,{get:i[t],enumerable:!0})},b=(a,i,t,e)=>{if(i&&typeof i=="object"||typeof i=="function")for(let s of w(i))!x.call(a,s)&&s!==t&&m(a,s,{get:()=>i[s],enumerable:!(e=I(i,s))||e.enumerable});return a};var S=a=>b(m({},"__esModule",{value:!0}),a);var y={};N(y,{default:()=>f});module.exports=S(y);var n=require("obsidian");var k={lockedNotes:new Set,mobileNotificationMaxLength:18,desktopNotificationMaxLength:22,showFileExplorerIcons:!0,showStatusBarButton:!0,showNotifications:!0};var v=require("obsidian"),d=class{constructor(i){this.folderObserver=null;this.updateDebounceTimeout=null;this.plugin=i}addFileExplorerIconStyling(){let i=document.createElement("style");i.id="note-locker-styles",i.textContent=`
            .note-locker-icon {
                display: inline-flex;
                justify-content: center;
                align-items: center;
                margin-left: 4px;
                width: 12px;
                height: 12px;
                font-size: 0.85em;
                color: var(--text-accent);
                vertical-align: middle;
            }
            .nav-file-title {
                display: flex;
                align-items: center;
            }
            .nav-file-title-content {
                flex: 1;
                min-width: 0;
                overflow: hidden;
                text-overflow: ellipsis;
            }
        `,document.head.appendChild(i),this.plugin.app.workspace.onLayoutReady(()=>{this.updateFileExplorerIcons(),this.setupFolderObserver(),this.registerFolderClickHandlers()})}registerFolderClickHandlers(){let i=document.querySelector(".workspace-split.mod-left-split .nav-files-container");i&&i.addEventListener("click",t=>{let e=t.target;(e.closest(".nav-folder-collapse-indicator")||e.closest(".nav-folder-title"))&&this.debouncedUpdateIcons(250)})}debouncedUpdateIcons(i=100){this.updateDebounceTimeout!==null&&window.clearTimeout(this.updateDebounceTimeout),this.updateDebounceTimeout=window.setTimeout(()=>{this.updateFileExplorerIcons(),this.updateDebounceTimeout=null},i)}setupFolderObserver(){this.folderObserver&&(this.folderObserver.disconnect(),this.folderObserver=null);let i=document.querySelector(".workspace-split.mod-left-split .nav-files-container");i&&(this.folderObserver=new MutationObserver(t=>{let e=!1;for(let s of t){if(s.addedNodes.length>0||s.removedNodes.length>0){e=!0;break}if(s.type==="attributes"&&s.target instanceof HTMLElement&&(s.target.classList.contains("nav-folder")||s.target.classList.contains("is-collapsed"))){e=!0;break}}e&&this.debouncedUpdateIcons(150)}),this.folderObserver.observe(i,{childList:!0,attributes:!0,attributeFilter:["class"],subtree:!0}))}updateFileExplorerIcons(){if(!this.plugin.settings.showFileExplorerIcons){this.removeFileExplorerIcons();return}this.removeFileExplorerIcons(),document.querySelectorAll(".nav-file").forEach(t=>{let e=t.querySelector(".nav-file-title");if(!e)return;let s=e.getAttribute("data-path");if(!s||!this.plugin.settings.lockedNotes.has(s))return;let o=document.createElement("div");o.addClass("note-locker-icon"),(0,v.setIcon)(o,"lock"),e.appendChild(o)})}removeFileExplorerIcons(){document.querySelectorAll(".note-locker-icon").forEach(i=>i.remove())}cleanup(){this.updateDebounceTimeout!==null&&(window.clearTimeout(this.updateDebounceTimeout),this.updateDebounceTimeout=null),this.folderObserver&&(this.folderObserver.disconnect(),this.folderObserver=null),this.removeFileExplorerIcons()}};var E=require("obsidian"),h=class{constructor(i){this.statusBarItemEl=null;this.plugin=i}createStatusBarItem(){this.plugin.settings.showStatusBarButton&&(this.statusBarItemEl=this.plugin.addStatusBarItem(),this.statusBarItemEl&&(this.statusBarItemEl.addClass("note-locker-status"),this.statusBarItemEl.addEventListener("click",()=>{let i=this.plugin.app.workspace.getActiveFile();i&&this.plugin.toggleNoteLock(i.path)}),this.updateStatusBarButton()))}updateStatusBarButton(){if(!this.plugin.settings.showStatusBarButton||!this.statusBarItemEl)return;let i=this.isCurrentNoteActive();this.statusBarItemEl.empty();let t=document.createElement("style");if(t.textContent=`
			.note-locker-status .locker-icon {
				margin-right: 6px;
			}
		`,document.head.appendChild(t),this.plugin.app.workspace.getActiveFile()){let e=this.statusBarItemEl.createSpan({cls:"locker-icon"});(0,E.setIcon)(e,i?"lock":"unlock"),this.statusBarItemEl.createSpan({text:i?" Locked":" Unlocked"}),this.statusBarItemEl.style.cursor="pointer",this.statusBarItemEl.setAttribute("aria-label",i?"Click to unlock this note":"Click to lock this note")}else this.statusBarItemEl.style.cursor="default"}isCurrentNoteActive(){let i=this.plugin.app.workspace.getActiveFile();return i?this.plugin.settings.lockedNotes.has(i.path):!1}removeStatusBarItem(){this.statusBarItemEl&&(this.statusBarItemEl.detach(),this.statusBarItemEl=null)}};var r=require("obsidian"),g=class extends r.PluginSettingTab{constructor(t,e){super(t,e);this.plugin=e}display(){let{containerEl:t}=this;t.empty(),new r.Setting(t).setName("Show locked notes in file explorer").setDesc("Display a lock icon next to locked notes in the file explorer").addToggle(l=>l.setValue(this.plugin.settings.showFileExplorerIcons).onChange(async c=>{await this.plugin.updateFileExplorerIconsVisibility(c)})),new r.Setting(t).setName("Show status bar button").setDesc("Display a lock/unlock button in the status bar for the current note").addToggle(l=>l.setValue(this.plugin.settings.showStatusBarButton).onChange(async c=>{await this.plugin.updateStatusBarVisibility(c)})),new r.Setting(t).setName("Show notifications").setDesc("Show notifications when locking or unlocking notes").addToggle(l=>l.setValue(this.plugin.settings.showNotifications).onChange(async c=>{this.plugin.settings.showNotifications=c,await this.plugin.saveSettings()}));let e=new r.Setting(t).setName("Mobile notification max length").setDesc("Maximum length of file names in notifications on mobile devices").addText(l=>l.setPlaceholder("18").setValue(String(this.plugin.settings.mobileNotificationMaxLength)).onChange(async c=>{let u=parseInt(c);!isNaN(u)&&u>0&&(this.plugin.settings.mobileNotificationMaxLength=u,await this.plugin.saveSettings())})),s=new r.Setting(t).setName("Desktop notification max length").setDesc("Maximum length of file names in notifications on desktop").addText(l=>l.setPlaceholder("22").setValue(String(this.plugin.settings.desktopNotificationMaxLength)).onChange(async c=>{let u=parseInt(c);!isNaN(u)&&u>0&&(this.plugin.settings.desktopNotificationMaxLength=u,await this.plugin.saveSettings())}));r.Platform.isMobile?s.settingEl.style.display="none":e.settingEl.style.display="none";let o=t.createEl("p",{text:"You can set a hotkey for locking/unlocking notes in Settings \u2192 Hotkeys \u2192 Toggle Lock for current note."});o.style.fontStyle="italic",t.createEl("h3",{text:"Locked Notes"});let p=this.plugin.settings.lockedNotes.size;t.createEl("p",{text:`You currently have ${p} locked note${p!==1?"s":""}.`})}};var f=class extends n.Plugin{constructor(){super(...arguments);this.settings=k}async onload(){await this.loadSettings(),this.fileExplorerUI=new d(this),this.statusBarUI=new h(this),this.registerEventHandlers(),this.initializeExistingLeaves(),this.settings.showStatusBarButton&&this.statusBarUI.createStatusBarItem(),this.settings.showFileExplorerIcons&&this.fileExplorerUI.addFileExplorerIconStyling(),this.addSettingTab(new g(this.app,this)),this.addCommand({id:"toggle-note-lock",name:"Toggle Lock for current note",checkCallback:t=>{let e=this.app.workspace.getActiveFile();return e&&e.extension==="md"?(t||this.toggleNoteLock(e.path),!0):!1}})}onunload(){let t=document.getElementById("note-locker-styles");t&&t.remove(),this.fileExplorerUI.cleanup(),this.statusBarUI.removeStatusBarItem()}registerEventHandlers(){this.registerEvent(this.app.workspace.on("file-menu",(t,e)=>this.addLockMenuItem(t,e.path))),this.registerEvent(this.app.workspace.on("editor-menu",(t,e,s)=>s.file&&this.addLockMenuItem(t,s.file.path))),this.registerEvent(this.app.workspace.on("active-leaf-change",t=>{this.updateLeafMode(t),this.statusBarUI.updateStatusBarButton()})),this.registerEvent(this.app.vault.on("rename",async(t,e)=>{this.settings.lockedNotes.delete(e)&&(this.settings.lockedNotes.has(t.path)?new n.Notice(`\u26A0\uFE0F Lock skipped: "${t.name}" was already locked`):this.settings.lockedNotes.add(t.path),await this.saveSettings(),this.fileExplorerUI.updateFileExplorerIcons())})),this.registerEvent(this.app.workspace.on("file-open",()=>{this.statusBarUI.updateStatusBarButton(),this.fileExplorerUI.updateFileExplorerIcons()})),this.registerEvent(this.app.workspace.on("layout-change",()=>{this.fileExplorerUI.updateFileExplorerIcons()}))}initializeExistingLeaves(){this.app.workspace.getLeavesOfType("markdown").forEach(t=>this.updateLeafMode(t))}addLockMenuItem(t,e){if(!e.endsWith(".md"))return;let o=this.settings.lockedNotes.has(e);t.addItem(p=>p.setTitle(o?"Unlock":"Lock").setIcon(o?"unlock":"lock").onClick(()=>this.toggleNoteLock(e)))}async toggleNoteLock(t){var o;let e=this.settings.lockedNotes.has(t);e?this.settings.lockedNotes.delete(t):this.settings.lockedNotes.add(t),await this.saveSettings();let s=this.app.vault.getAbstractFileByPath(t);if(!s){new n.Notice("Error: Note not found");return}if(this.settings.showNotifications){let p=s instanceof n.TFile?s.basename:((o=t.split("/").pop())==null?void 0:o.replace(/\..+$/,""))||t,l=this.truncateFileName(p);new n.Notice(`${e?"\u{1F513} Unlocked":"\u{1F512} Locked"}: ${l}`)}this.updateAllNoteInstances(t),this.statusBarUI.updateStatusBarButton(),this.fileExplorerUI.updateFileExplorerIcons()}truncateFileName(t){let e=n.Platform.isMobile?this.settings.mobileNotificationMaxLength:this.settings.desktopNotificationMaxLength;return t.length>e?`${t.slice(0,e)}\u2026`:t}updateAllNoteInstances(t){this.app.workspace.getLeavesOfType("markdown").filter(e=>this.isSameNote(e,t)).forEach(e=>this.updateLeafMode(e))}isSameNote(t,e){var o;let s=t.view;return s instanceof n.MarkdownView&&((o=s.file)==null?void 0:o.path)===e}updateLeafMode(t){var o;if(!t||!(t.view instanceof n.MarkdownView))return;let{view:e}=t,s=e.file&&this.settings.lockedNotes.has(e.file.path)?"preview":"source";((o=t.getViewState().state)==null?void 0:o.mode)!==s&&t.setViewState({...t.getViewState(),state:{...t.getViewState().state,mode:s}})}async loadSettings(){let t=await this.loadData();t&&(this.settings={...k,...t,lockedNotes:new Set(t.lockedNotes||[])})}async saveSettings(){await this.saveData({...this.settings,lockedNotes:Array.from(this.settings.lockedNotes)})}async updateFileExplorerIconsVisibility(t){this.settings.showFileExplorerIcons=t,t?this.fileExplorerUI.addFileExplorerIconStyling():this.fileExplorerUI.removeFileExplorerIcons(),await this.saveSettings()}async updateStatusBarVisibility(t){this.settings.showStatusBarButton=t,t?this.statusBarUI.statusBarItemEl||this.statusBarUI.createStatusBarItem():this.statusBarUI.removeStatusBarItem(),await this.saveSettings()}};

/* nosourcemap */